#!/bin/bash

__command_exists git || {
  echo "git is not installed."
  return
}

# Git get the current branch
getCurrentBranch() {
  local ref
  ref=$(command git symbolic-ref --quiet HEAD 2> /dev/null)
  local ret=$?
  if [[ $ret != 0 ]]; then
    [[ $ret == 128 ]] && return  # no git repo.
    ref=$(command git rev-parse --short HEAD 2> /dev/null) || return
  fi
  echo ${ref#refs/heads/}
}

# Verify if local repository exists
isGitRepo() {
  local GET_REPO=true
  if [[ ! -d ".git" ]]; then
    echo -e "${redb}No such repository (.git).${end}"
    GET_REPO=false
    return false
  fi

  echo $GET_REPO
}

# Verify if there is a remote repository
isRemoteGitPull() {
  local CURRENT_BRANCH="$(getCurrentBranch)"
  if [[ -n "$(command git show-ref origin/${CURRENT_BRANCH} 2> /dev/null)" ]]; then
    pull
  else
    echo -e "${blueb}Remote does not exists.${end}"
  fi
}

# Git update [pull] multiple repositories
update() {
  OLDIFS=""
  IFS=$'\n'

  local folders=($(ls -d */ | cut -f1 -d'/'))

  IFS=$OLDIFS
  if [ $(getSystemOS) = "Msys" ]; then
    for (( i = 0; i < ${#folders[@]}; ++i )); do
      cd ${folders[$i]}
      echo -e "Opening ${blueb}${folders[$i]}${end}"

      isRemoteGitPull

      cd ..
      echo -e "Closing."
      echo ""
    done
  else
    for (( i = 1; i <= ${#folders[@]}; ++i )); do
      cd ${folders[$i]}
      echo -e "Opening ${blueb}${folders[$i]}${end}"

      isRemoteGitPull

      cd ..
      echo -e "Closing."
      echo ""
    done
  fi
}

# Update [pull] any repositories
upis() {
  local CURRENT_DIR="$PWD"
  cd "$1"
  update
  cd $CURRENT_DIR
}

# Git show logs
# Usage: logs <number> <user_name:optional>
# where <number> is one of:
#     1 ... ~
logs() {
  if [[ "$(isGitRepo)" = true ]]; then
    if [ "$1" ] && [ "$2" ]; then
      git log --pretty=format:"%C(yellow)%h %Cblue%>(12)%ad %Cgreen%<(7)%aN%Cred%d %Creset%s" --date-order -n "$1" --date=short --author="$2"
    elif [ "$1" ]; then
      git log --pretty=format:"%C(yellow)%h %Cblue%>(12)%ad %Cgreen%<(7)%aN%Cred%d %Creset%s" --date-order -n "$1" --date=short
    else
      git log --pretty=format:"%C(yellow)%h %Cblue%>(12)%ad %Cgreen%<(7)%aN%Cred%d %Creset%s" --date=short
    fi

    return
  fi

  isGitRepo
}

# Verify if there are files to versioned
changes() {
  local changed=false
  if [[ -n "$(command git status --porcelain)" ]]; then
    changed=true
  fi
  echo $changed
}

# Ask if you'd like to commit changes
gcommit() {
  if [[ "$(isGitRepo)" = true ]]; then
    local getChange="$(changes)"

    if [ $getChange = true ]; then
      echo ""
      echo -e "${lightblueb}You have some modified files to commit.${end}"
      echo -e "Would you like to commit it? ${yellowb}[1]${end} Yes ${yellowb}[2]${end} No"
      echo ""
      read SEND

      if [ $SEND = "1" ]; then
        git add .
        git commit -m "$1"
      else
        echo ""
        echo -e "${redb}Your have files not versioned.${end}"
        git status -s
      fi
    else
      echo -e "${redb}Nothing to commit.${end}"
    fi

    return
  fi

  isGitRepo
}

cplist() {
  # Verifica se o diretório atual é um repositório Git
  if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    echo -e "${redb}Error:${end} Current directory is not a Git repository."
    return 1
  fi

  if [ -z "$1" ]; then
    echo ""
    printf "Usage:\n"
    printf "\n    ${purpleb}cplist <folder> <hash:optional>${end}\n"
    return
  fi

  local TARGET_FOLDER="$1/$(basename $(pwd))"

  if [ ! -d "$TARGET_FOLDER" ]; then
    mkdir -p "$TARGET_FOLDER"
  fi

  OLDIFS=$IFS
  IFS=$'\n'
  local FILES_TO_COPY=()

  if [ "$2" ]; then
    FILES_TO_COPY=($(git diff-tree --no-commit-id --name-only -r "$2"))
  else
    FILES_TO_COPY=($(git status -s | awk '{if ($1 == "M" || $1 == "A") print $2}'))
  fi

  IFS=$OLDIFS

  if ((${#FILES_TO_COPY[@]} > 0)); then
    echo ""
    printf "${yellowb}Copy files to:${end} $TARGET_FOLDER"
    echo ""
    for file_item in "${FILES_TO_COPY[@]}"; do
      printf "\n  > ${blueb}${file_item}${end}"

      if [ "$(getSystemOS)" = "Mac" ]; then
        # echo -e "${lightblueb}Sorry, but it works only in Msys System =)${end}"
        rsync -R "${file_item}" "$TARGET_FOLDER"
      else
        cp --parents "${file_item}" "$TARGET_FOLDER"
      fi
    done
    echo ""
  else
    echo -e "${lightblueb}Everything looks good.${end}"
  fi
}

gitRemote() {
  if [[ $# -eq 0 ]]; then
    echo "Need arguments."
    return
  fi

  case "$1" in
    delete|-d|-D|--delete)
      git branch -d $2
      git push origin --delete $2
      return
    ;;
  esac
}

copied() {
  if [[ $# -eq 0 ]]; then
    echo -e """
      Usage:   copied ${yellowb}<source> <destination>${end}

      Example:

        ${greenb}copied /root/myFolder ~/Desktop/myfolder${end}
        ${greenb}copied /root/otherFolder/myFile.sh ~/Desktop/otherFolder${end}

    """
    return
  fi

  if [ $(getSystemOS) = "Mac" ]; then
    ditto -V $1 $2
  else
    cp --parents $1 $2
  fi
}

gitZip() {
  if [[ $# -eq 0 ]]; then
    echo -e """
      Usage:   gitZip ${yellowb}<zip-name> <branch>${end}

      Where:

        ${yellowb}<zip-name>${end} : is a destination folder with a zip file name
        ${yellowb}<branch>${end}   : branch name, optional (master=default)

      Example:

        ${greenb}gitZip ~/Desktop/myzipfolder mybranch${end}

    """
    return
  fi

  local branch="master"
  if [ "$2" ]; then
    local branch="$2"
  fi

  git archive --format zip --output "$1.zip" $branch
}
