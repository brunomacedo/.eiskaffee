#!/bin/bash

# Copy a file from template and replace a string inside it
# Usage: rewriteFile <template> <file_array> <find_string> -status
# where:
#     <template>    :
#     <file_array>  : a file that reads line by line separated or not by semicolon (;)
#     <find_string> : optional - its find a string in your file to replace from list of array
#     -status       : optional - check if status code response with 200
rewriteFile() {
  if [ "$1" != "" ] && [ "$1" ]; then
    OLDIFS=""
    IFS=$'\n'
    local FILES_ARRAY=()
    local FILES_STRING=""
    local COUNTER_ITEM=0

    if [ ! -d $2 ]; then
      FILES_ARRAY=($(cat $2))
      IFS=$OLDIFS
      STATUS_CODE=200
      EXCLUDE_STATUS=301

      for (( i = 0; i < ${#FILES_ARRAY[@]}; ++i )); do
        FULL_URL=$(echo ${FILES_ARRAY[$i]} | cut -d ";" -f 1)
        REMOVE_HTTPS_URL="$(echo $FULL_URL | sed 's/https\?:\/\///g')"

        if [[ $@ = *"-status"* ]]; then
        # if [[ "${@#-status}" = "$@" ]]; then
          STATUS_CODE=$(checkStatusCode $FULL_URL)
        fi

        if [ ! $STATUS_CODE = $EXCLUDE_STATUS ]; then
          CHECK_URL=$(checkFileOrDiretory $REMOVE_HTTPS_URL)
          COUNTER_ITEM=$((COUNTER_ITEM + 1))

          forceCreateFile ${CHECK_URL}
          cp $1 ${CHECK_URL}

          if [ "$3" != "-status" ] && [ "$3" != "" ] && [ "$3" ]; then
            if ! grep -Fxq "$3" $1  > /dev/null; then
              replaceStringIntoFile "$3" "$FULL_URL" ${CHECK_URL}
            fi
          fi

          echo -e "${lightblueb}$COUNTER_ITEM${end} - ${CHECK_URL}"
        fi
      done
    fi

  else
    echo ""
    printf "${redb}Copy a file from template and replace a string inside it${end}"
    printf "\n${yellowb}Usage:${end} rewriteFile <template> <file_array> <find_string> <status>"
    echo ""
    printf "\nwhere:"
    printf "\n    ${purple}<template>${end}    :"
    printf "\n    ${purple}<file_array>${end}  : a file that reads line by line separated or not by semicolon (;)"
    printf "\n    ${purple}<find_string>${end} : ${greenb}optional${end} - its find a string in your file to replace from list of array"
    printf "\n    ${purple}<status>${end}      : ${greenb}optional${end} - check if status code response with 200"
    echo ""
  fi
}

# Replace a string in a file
# Usage: replaceStringIntoFile <find_string> <replace_to> <search_file>
# where:
#     <find_string>:  "EXAMPLE"
#     <replace_to> :  "NEWEXAMPLE"
#     <search_file>:  ~/Desktop/path
replaceStringIntoFile() {
  sed -i -e 's,'"$1"','"$2"',g' $3
}

forceCreateFile() {
  mkdir -p "$(dirname "$1")" || return; touch "$1"
}

checkFileOrDiretory() {
  local ISTRAILINGSLASH=$(echo $1 | sed 's/\/$//g')
  local ISFILE=$(printf '%s\n' "${ISTRAILINGSLASH##*/}")

  if [[ ! $ISFILE = *.html ]]; then
    echo "$ISTRAILINGSLASH/index.html"
  else
    echo "$ISTRAILINGSLASH"
  fi
}

# Check status code from an url
# Usage: checkStatusCode https://brunomacedo.com.br
# Terminal: 200
checkStatusCode() {
  STATUS_CODE=$(curl --write-out "%{http_code}\n" --silent --output /dev/null "$1")
  echo $STATUS_CODE
}
