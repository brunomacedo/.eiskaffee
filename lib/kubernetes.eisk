#!/bin/bash

__command_exists kubectl || {
  echo "Error: kubectl is not installed."
  exit 1
}

COMPREPLY=()
kubectl_namespaces=($(kubectl get namespaces -o name | cut -d "/" -f 2))
kubectl_contexts=($(kubectl config get-contexts -o name))
kubectl_clusters=($(kubectl config get-clusters | grep "intranet"))
auth_url=""
auth_action=""
username=""
password=""
REPOSITORY="$(git config --get remote.origin.url)"

__k8s_usage() {
  echo ""
  echo -e "     Usage: k8s <command> ${yellowb}<environment>${end}"
  echo -e "     Where ${yellowb}<command>${end} is one of:"
  echo -e "       ${greenb}->${end} login ${lightblue}(get authorization)${end}"
  echo -e "       ${greenb}->${end} set-namespace ${lightblue}(set namespace in all contexts)${end}"
  echo ""
  echo -e "     And ${yellowb}<environment>${end} is one of:"
  for k8s_context in "${kubectl_clusters[@]}"; do
    echo -e "       ${greenb}->${end} ${k8s_context}"
  done
  echo ""
  printf "  ${blueb}More info:${end} $REPOSITORY"
  echo ""
}

__get_auth_action_k8s() {
  local response=$(curl --write-out "HTTPSTATUS:%{http_code}" -s -k -L --insecure "$auth_url")
  local http_status=$(echo "$response" | tr -d '\n' | sed -E 's/.*HTTPSTATUS:([0-9]{3})$/\1/')
  echo
  if [ ! "$http_status" -eq 200 ]; then
    printf "\n${greenb}Failed to connect:${end} $auth_url"
    return
  else
    auth_action=$(echo $response | sed -E -n 's/.*action="([^"]+)".*/\1/p')
  fi
}

_login_k8s() {
  base_url="https://auth.kube-system.svc.cluster.$1"
  auth_url="https://login.kube-system.svc.cluster.$1/auth"

  __get_auth_action_k8s

  local login_url="$base_url$auth_action"
  local login_result=$(curl --write-out "HTTPSTATUS:%{http_code}" -s -k -L --insecure "$login_url" --data 'login='"$username"'&password='"$password"'')
  local login_http_status=$(echo "$login_result" | tr -d '\n' | sed -E 's/.*HTTPSTATUS:([0-9]{3})$/\1/')

  if [ ! "$login_http_status" -eq 200 ]; then
    printf "Login failed! [HTTP status: ${redb}$login_http_status${end}]"
    return
  else
    if echo "$login_result" | grep -q "login-error"; then
      printf "\n   ${yellowb}Invalid Username and/or Password.${end}\n"
    else
      echo "$login_result" | sed -E -n 's/.*data-clipboard-text="([^"]+)".*/\1/p' | bash
    fi
  fi
}

__k8s_login() {
  if [ -z $1 ]; then
    __k8s_usage
    return
  fi

  username="${K8S_CREDENTIALS[username]}"
  password="${K8S_CREDENTIALS[password]}"

  if [[ ! -z $(printf '%s\n' "${kubectl_clusters[@]}" | grep -w "$1") ]]; then
    if [[ -z "${K8S_CREDENTIALS[username]}" ]]; then
      printf "${yellowb}Username: ${end}"
      read username

      if [ -z "$username" ]; then
        echo "Username required."
        return
      fi
    fi

    if [[ -z "${K8S_CREDENTIALS[password]}" ]]; then
      printf "${yellowb}Password: ${end}"
      read -rs password

      if [ -z "$password" ]; then
        echo "Password required."
        return
      fi
    fi

    _login_k8s "$1"
  else
    printf "\n  Cluster ${redb}${1}${end} not found or doesn´t exists.\n"
  fi
}

__k8s_set_namespace() {
  if [ -z $1 ]; then
    __k8s_usage
    return
  fi

  if [[ ! -z $(printf '%s\n' "${kubectl_namespaces[@]}" | grep -w "$1") ]]; then
    local SET_ALL;
    printf "\nSet namespace ${yellowb}$1${end} in all contexts:\n\n"
    for k8s_context in "${kubectl_contexts[@]}"; do
      printf "  ${greenb}->${end} ${k8s_context}\n"
      SET_ALL=$(kubectl config set-context $k8s_context --namespace=$1)
    done
  else
    printf "\n  Namespace ${redb}${1}${end} not found or doesn´t exists.\n"
  fi
}

k8s() {
  if [[ $# -eq 0 ]]; then
    __k8s_usage
    return
  fi

  case "$1" in
    set-namespace)
      __k8s_set_namespace "$2"
      return
      ;;
    login)
      __k8s_login "$2"
      return
      ;;
    -h|--help)
      __k8s_usage
      ;;
  esac
}

# COMPLETION
# bash completion for extends k8s
__get_all_contexts() {
  local cur=${COMP_WORDS[COMP_CWORD]}
  local prev=${COMP_WORDS[COMP_CWORD-1]}

  if (( COMP_CWORD == 1 )); then
    COMPREPLY=($(compgen -W "--help login set-namespace" -- "$cur"))
    return
  fi

  case "$prev" in
    -*)
      return
      ;;
    set-namespace)
      COMPREPLY=($(compgen -W "${kubectl_namespaces[*]}" -- "$cur"))
      return
      ;;
    login)
      COMPREPLY=($(compgen -W "${kubectl_clusters[*]}" -- "$cur"))
      return
      ;;
  esac
}

__start_k8s() {
  __get_all_contexts
}

__command_exists complete || return

complete -F __start_k8s k8s
